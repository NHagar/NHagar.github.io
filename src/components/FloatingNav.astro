---
import { Icon } from "astro-icon/components";

interface NavSection {
    id: string;
    label: string;
    icon: string;
}

const sections: NavSection[] = [
    { id: "updates", label: "Recent Updates", icon: "mdi:clock-outline" },
    { id: "research", label: "Research Focus", icon: "mdi:lightbulb-outline" },
    {
        id: "papers",
        label: "Academic Papers",
        icon: "mdi:file-document-outline",
    },
    {
        id: "mentions",
        label: "Media Mentions",
        icon: "mdi:newspaper-variant-outline",
    },
    { id: "software", label: "Software & Code", icon: "mdi:code-tags" },
    { id: "blog", label: "Blog & Newsletter", icon: "mdi:pencil-outline" },
    { id: "prototypes", label: "Prototypes", icon: "mdi:flask-outline" },
    { id: "bio", label: "About", icon: "mdi:account-outline" },
];
---

<nav class="fixed left-6 top-1/2 -translate-y-1/2 z-50 hidden xl:block">
    <div class="bg-white rounded-lg shadow-lg border border-gray-200 p-4 w-56">
        <h3
            class="text-sm font-semibold text-text-primary mb-3 academic-heading"
        >
            Navigate
        </h3>
        <ul class="space-y-1">
            {
                sections.map((section) => (
                    <li>
                        <a
                            href={`#${section.id}`}
                            class="flex items-center gap-3 px-3 py-2 rounded-md text-sm text-text-secondary hover:text-primary-600 hover:bg-primary-50 transition-all duration-200 group"
                            data-nav-link={section.id}
                        >
                            <Icon
                                name={section.icon}
                                class="w-4 h-4 text-text-tertiary group-hover:text-primary-600 transition-colors"
                            />
                            <span class="academic-text">{section.label}</span>
                        </a>
                    </li>
                ))
            }
        </ul>
    </div>
</nav>

<script>
    // Smooth scroll behavior and active section highlighting
    document.addEventListener("DOMContentLoaded", () => {
        const navLinks = document.querySelectorAll("[data-nav-link]");
        const sections = document.querySelectorAll("section[id]");

        // Handle click navigation
        navLinks.forEach((link) => {
            link.addEventListener("click", (e) => {
                e.preventDefault();
                const targetId = link.getAttribute("data-nav-link");
                const targetSection = document.getElementById(targetId);

                if (targetSection) {
                    targetSection.scrollIntoView({
                        behavior: "smooth",
                        block: "start",
                    });
                }
            });
        });

        // Highlight active section on scroll
        const observerOptions = {
            root: null,
            rootMargin: "-20% 0px -60% 0px",
            threshold: 0,
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                const navLink = document.querySelector(
                    `[data-nav-link="${entry.target.id}"]`,
                );
                if (navLink) {
                    if (entry.isIntersecting) {
                        // Remove active class from all links
                        navLinks.forEach((link) => {
                            link.classList.remove(
                                "text-primary-600",
                                "bg-primary-50",
                            );
                            link.classList.add("text-text-secondary");
                        });

                        // Add active class to current link
                        navLink.classList.remove("text-text-secondary");
                        navLink.classList.add(
                            "text-primary-600",
                            "bg-primary-50",
                        );
                    }
                }
            });
        }, observerOptions);

        // Observe all sections
        sections.forEach((section) => {
            observer.observe(section);
        });
    });
</script>
